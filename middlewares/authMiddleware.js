const jwt = require('jsonwebtoken');
const User = require('../models/User'); // ‚≠ê AJOUT IMPORTANT
require('dotenv').config();

module.exports = async (req, res, next) => {
  try {
    const authHeader = req.headers['authorization'];

    // ‚úÖ V√©rifie que le token est pr√©sent
    if (!authHeader) {
      return res.status(401).json({ message: 'Acc√®s refus√©. Aucun token fourni.' });
    }

    const token = authHeader.split(' ')[1]; // Bearer <token>

    if (!token) {
      return res.status(401).json({ message: 'Format de token invalide.' });
    }

    console.log('üîê V√©rification du token...');
    
    // D√©coder le token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log('‚úÖ Token d√©cod√©:', { userId: decoded.userId || decoded.id, username: decoded.username });

    // ‚≠ê CORRECTION PRINCIPALE: R√©cup√©rer l'utilisateur complet depuis la DB
    const user = await User.findById(decoded.userId || decoded.id).select('-password');
    
    if (!user) {
      console.log('‚ùå Utilisateur non trouv√© pour ID:', decoded.userId || decoded.id);
      return res.status(401).json({ message: 'Utilisateur non trouv√©.' });
    }

    console.log('‚úÖ Utilisateur charg√©:', {
      id: user._id,
      username: user.username,
      cbu: user.cbu,
      fullname: user.fullname
    });

    // ‚≠ê CHANGEMENT: Attacher l'utilisateur COMPLET au lieu du token d√©cod√©
    req.user = user; // Maintenant req.user contient toutes les infos utilisateur
    req.userId = user._id; // ID aussi disponible directement
    
    next();
    
  } catch (err) {
    console.error('‚ùå Erreur authentification:', err.message);
    
    if (err.name === 'JsonWebTokenError') {
      return res.status(403).json({ message: 'Token invalide.' });
    }
    
    if (err.name === 'TokenExpiredError') {
      return res.status(403).json({ message: 'Token expir√©.' });
    }
    
    res.status(500).json({ message: 'Erreur serveur d\'authentification.' });
  }
};